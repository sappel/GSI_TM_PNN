from keras import backend as K


def get_reg_term_2_2(rate, W):
    W1 = W[1]
    w100, w101, w110, w111 = W1[0,0], W1[1,0], W1[0,1], W1[1,1]

    reg = K.abs(w100*w111 - w101*w110 - 1)

    if len(W)>2:
        W2 = W[2]
        w200, w201, w202, w203 = W2[0,0], W2[1,0], W2[2,0], W2[3,0]
        w210, w211, w212, w213 = W2[0,1], W2[1,1], W2[2,1], W2[3,1]

        reg += K.abs(w100*w211 + w100*w212 - 2*w101*w210 - 2*w110*w201 + 2*w111*w200) #*x
        reg += K.abs(2*w100*w213 - w101*w211 - w101*w212 - 2*w110*w203 + 2*w111*w201) #*y
        reg += K.abs(2*w200*w211 + 2*w200*w212 - 4*w201*w210) #*x**2
        reg += K.abs(4*w201*w213 - 2*w203*w211 - 2*w203*w212) #*y**2
        reg += K.abs(4*w200*w213 - 4*w203*w210) #*x*y

    return reg


def dim2_order3(rate, W):
    W1, W2, W3 = W[1], W[2], W[3]
    w100, w101, w110, w111 = W1[0,0], W1[1,0], W1[0,1], W1[1,1]
    w200, w201, w202, w203 = W2[0,0], W2[1,0], W2[2,0], W2[3,0]
    w210, w211, w212, w213 = W2[0,1], W2[1,1], W2[2,1], W2[3,1]

    w300, w301, w302, w303, w304, w305, w306, w307 = W3[0,0], W3[1,0], W3[2,0], W3[3,0], W3[4,0], W3[5,0], W3[6,0], W3[7,0]
    w310, w311, w312, w313, w314, w315, w316, w317 = W3[0,1], W3[1,1], W3[2,1], W3[3,1], W3[4,1], W3[5,1], W3[6,1], W3[7,1]

    reg = K.abs(w100*w111 - w101*w110 - 1)
    reg += K.abs(w100*w211 + w100*w212 - 2*w101*w210 - 2*w110*w201 + 2*w111*w200) #x
    reg += K.abs(2*w100*w213 - w101*w211 - w101*w212 - 2*w110*w203 + 2*w111*w201) #y
    reg += K.abs(w100*w311 + w100*w312 + w100*w314 - 3*w101*w310 - w110*w301 - w110*w302 - w110*w304 + 3*w111*w300 + 2*w200*w211 + 2*w200*w212 - 4*w201*w210) #x**2
    reg += K.abs(3*w100*w317 + w111*w303 + w111*w305 + w111*w306 - 3*w110*w307 + 4*w201*w213 - 2*w203*w211 - 2*w203*w212 - w101*w313 - w101*w315 - w101*w316) #y**2
    reg += K.abs(2*w200*w311 + 2*w200*w312 + 2*w200*w314 - 6*w201*w310 - 2*w210*w301 - 2*w210*w302 - 2*w210*w304 + 3*w211*w300 + 3*w212*w300) #x**3
    reg += K.abs(6*w201*w317 - 2*w203*w313 - 2*w203*w315 - 2*w203*w316 - 3*w211*w307 - 3*w212*w307 + 2*w213*w303 + 2*w213*w305 + 2*w213*w306) # y*3
    reg += K.abs(3*w300*w311 + 3*w300*w312 + 3*w300*w314 - 3*w301*w310 - 3*w302*w310 - 3*w304*w310) #x**4
    reg += K.abs(3*w303*w317 + 3*w305*w317 + 3*w306*w317 - 3*w307*w313 - 3*w307*w315 - 3*w307*w316) #y**4
    reg += K.abs(6*w300*w313 + 6*w300*w315 + 6*w300*w316 - 6*w303*w310 - 6*w305*w310 - 6*w306*w310) #x**3*y
    reg += K.abs(9*w300*w317 + 3*w301*w313 + 3*w301*w315 + 3*w301*w316 + 3*w302*w313 + 3*w302*w315 + 3*w302*w316 - 3*w303*w311 - 3*w303*w312 - 3*w303*w314 + 3*w304*w313 + 3*w304*w315 + 3*w304*w316 - 3*w305*w311 - 3*w305*w312 - 3*w305*w314 - 3*w306*w311 - 3*w306*w312 - 3*w306*w314 - 9*w307*w310) #x**2*y**2
    reg += K.abs(4*w200*w313 + 4*w200*w315 + 4*w200*w316 - 2*w201*w311 - 2*w201*w312 - 2*w201*w314 - 6*w203*w310 - 4*w210*w303 - 4*w210*w305 - 4*w210*w306 + w211*w301 + w211*w302 + w211*w304 + w212*w301 + w212*w302 + w212*w304 + 6*w213*w300) #x**2*y
    reg += K.abs(6*w301*w317 + 6*w302*w317 + 6*w304*w317 - 6*w307*w311 - 6*w307*w312 - 6*w307*w314) #x*y**3
    reg += K.abs(6*w200*w317 + 2*w201*w313 + 2*w201*w315 + 2*w201*w316 - 4*w203*w311 - 4*w203*w312 - 4*w203*w314 - 6*w210*w307 - w211*w303 - w211*w305 - w211*w306 - w212*w303 - w212*w305 - w212*w306 + 4*w213*w301 + 4*w213*w302 + 4*w213*w304) #x*y**2
    reg += K.abs(2*w100*w313 + 2*w100*w315 + 2*w100*w316 - 2*w101*w311 - 2*w101*w312 - 2*w101*w314 - 2*w110*w303 - 2*w110*w305 - 2*w110*w306 + 2*w111*w301 + 2*w111*w302 + 2*w111*w304 + 4*w200*w213 - 4*w203*w210) #x*y

    return rate*reg


def dim6_order1(rate, W):
    ''' First-order map, state vector (x, y, t, px, py, dK)'''
    W1 = W[1]
    w100, w101, w110, w111 = W1[0,0], W1[1,0], W1[0,1], W1[1,1]

    r11, r12, r13, r14, r15, r16 = W1[0,0], W1[1,0], W1[2,0], W1[3,0], W1[4,0], W1[5,0]
    r21, r22, r23, r24, r25, r26 = W1[0,1], W1[1,1], W1[2,1], W1[3,1], W1[4,1], W1[5,1]
    r31, r32, r33, r34, r35, r36 = W1[0,2], W1[1,2], W1[2,2], W1[3,2], W1[4,2], W1[5,2]
    r41, r42, r43, r44, r45, r46 = W1[0,3], W1[1,3], W1[2,3], W1[3,3], W1[4,3], W1[5,3]
    r51, r52, r53, r54, r55, r56 = W1[0,4], W1[1,4], W1[2,4], W1[3,4], W1[4,4], W1[5,4]
    r61, r62, r63, r64, r65, r66 = W1[0,5], W1[1,5], W1[2,5], W1[3,5], W1[4,5], W1[5,5]

    reg = K.abs(r11*r42 - r12*r41 + r21*r52 - r22*r51 + r31*r62 - r32*r61)
    reg += K.abs(r11*r43 - r13*r41 + r21*r53 - r23*r51 + r31*r63 - r33*r61)
    reg += K.abs(r11*r44 - r14*r41 + r21*r54 - r24*r51 + r31*r64 - r34*r61 - 1)
    reg += K.abs(r11*r45 - r15*r41 + r21*r55 - r25*r51 + r31*r65 - r35*r61)
    reg += K.abs(r11*r46 - r16*r41 + r21*r56 - r26*r51 + r31*r66 - r36*r61)
    reg += K.abs(r12*r43 - r13*r42 + r22*r53 - r23*r52 + r32*r63 - r33*r62)
    reg += K.abs(r12*r44 - r14*r42 + r22*r54 - r24*r52 + r32*r64 - r34*r62)
    reg += K.abs(r12*r45 - r15*r42 + r22*r55 - r25*r52 + r32*r65 - r35*r62 - 1)
    reg += K.abs(r12*r46 - r16*r42 + r22*r56 - r26*r52 + r32*r66 - r36*r62)
    reg += K.abs(r13*r44 - r14*r43 + r23*r54 - r24*r53 + r33*r64 - r34*r63)
    reg += K.abs(r13*r45 - r15*r43 + r23*r55 - r25*r53 + r33*r65 - r35*r63)
    reg += K.abs(r13*r46 - r16*r43 + r23*r56 - r26*r53 + r33*r66 - r36*r63 - 1)
    reg += K.abs(r14*r45 - r15*r44 + r24*r55 - r25*r54 + r34*r65 - r35*r64)
    reg += K.abs(r14*r46 - r16*r44 + r24*r56 - r26*r54 + r34*r66 - r36*r64)
    reg += K.abs(r15*r46 - r16*r45 + r25*r56 - r26*r55 + r35*r66 - r36*r65)

    return reg